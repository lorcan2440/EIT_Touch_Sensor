# fcnn_6_finger_1.keras

### Model Architecture

model_fcnn.add(Input(shape=(1024,)))
model_fcnn.add(Dense(units=256, activation='relu'))
model_fcnn.add(Dense(units=64, activation='relu'))
model_fcnn.add(Dense(units=16, activation='relu'))
model_fcnn.add(Dense(units=6, activation='sigmoid'))
model_fcnn.compile(optimizer='adam', loss='mse')

### Model Training

model_fcnn.fit(X_train, y_train, epochs=200, batch_size=128,
    validation_data=(X_val, y_val))
	
### Model Performance

Proportion (training): 100.0%
Proportion (testing): 93.93939393939394%
Fully correct (training): 100.0%
Fully correct (testing): 69.0909090909091%

# fcnn_6_finger_2.keras

### Model Architecture

model_fcnn.add(Input(shape=(1024,)))
model_fcnn.add(Dense(units=256, activation='relu'))
model_fcnn.add(Dense(units=64, activation='relu'))
model_fcnn.add(Dense(units=16, activation='relu'))
model_fcnn.add(Dense(units=6, activation='sigmoid'))
model_fcnn.compile(optimizer='adam', loss='mse')

### Model Training

model_fcnn.fit(X_train, y_train, epochs=10, batch_size=128,
    validation_data=(X_val, y_val))

### Model Performance

Proportion (training): 99.98106060606061%
Proportion (testing): 93.93939393939394%
Fully correct (training): 99.88636363636364%
Fully correct (testing): 69.0909090909091%

# fcnn_6_finger_3.keras

### Model Architecture

model_fcnn.add(Input(shape=(1024,)))
model_fcnn.add(Dense(units=792, activation='relu'))
model_fcnn.add(Dense(units=128, activation='relu'))
model_fcnn.add(Dense(units=128, activation='relu'))
model_fcnn.add(Dense(units=6, activation='sigmoid'))
model_fcnn.compile(optimizer='adam', loss='binary_crossentropy')

### Model Training

model_fcnn.fit(X_train, y_train, epochs=30, batch_size=128,
    validation_data=(X_val, y_val))

### Model Performance

Proportion (training): 100.0%
Proportion (testing): 93.93939393939394%
Fully correct (training): 100.0%
Fully correct (testing): 71.81818181818181%

